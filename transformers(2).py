# -*- coding: utf-8 -*-
"""Transformers(2).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Jwv3e_whHvnn4D_p6bNIUytyqbir2Feq
"""

pip install transformers datasets evaluate accelerate

from datasets import load_dataset

imdb = load_dataset("imdb")

# Sample only 500 rows for each split
imdb = {
    "train": imdb["train"].shuffle(seed=42).select(range(500)),
    "test": imdb["test"].shuffle(seed=42).select(range(500)),

}

from datasets import DatasetDict
imdb = DatasetDict(imdb)

imdb["test"][0]

from transformers import AutoTokenizer
tokenizer = AutoTokenizer.from_pretrained("distilbert/distilbert-base-uncased")

def preprocess_function(examples):
    return tokenizer(examples["text"], truncation=True)

tokenized_imdb = imdb.map(preprocess_function, batched=True)

tokenized_imdb["train"][0]

from transformers import DataCollatorWithPadding
data_collator = DataCollatorWithPadding(tokenizer=tokenizer)

import evaluate
accuracy = evaluate.load("accuracy")

import numpy as np

def compute_metrics(eval_pred):
    predictions, labels = eval_pred
    predictions = np.argmax(predictions, axis=1)
    return accuracy.compute(predictions=predictions, references=labels)

id2label = {0: "NEGATIVE", 1: "POSITIVE"}
label2id = {"NEGATIVE": 0, "POSITIVE": 1}

from transformers import AutoModelForSequenceClassification, TrainingArguments, Trainer

model = AutoModelForSequenceClassification.from_pretrained(
    "distilbert/distilbert-base-uncased", num_labels=2, id2label=id2label, label2id=label2id
)

from huggingface_hub import notebook_login
notebook_login()

training_args = TrainingArguments(
    output_dir="SentimentAnalysis",
    learning_rate=2e-5,
    per_device_train_batch_size=16,
    per_device_eval_batch_size=16,
    num_train_epochs=2,
    eval_strategy="epoch",
    save_strategy="epoch",
    load_best_model_at_end=True,
    push_to_hub=True,
)

trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=tokenized_imdb["train"],
    eval_dataset=tokenized_imdb["test"],
    tokenizer=tokenizer,
    data_collator=data_collator,
    compute_metrics=compute_metrics,
)

trainer.train()

trainer.push_to_hub()

text = "This was a masterpiece. Not completely faithful to the books, but enthralling from beginning to end. Might be my favorite of the three."

from transformers import pipeline

classifier = pipeline("sentiment-analysis", model="Menna-Khaled/SentimentAnalysis")
classifier(text)

text = "that was great"

from transformers import pipeline

classifier = pipeline("sentiment-analysis",  model="Menna-Khaled/SentimentAnalysis")
classifier(text)

text = "very bad opinion"

from transformers import pipeline

classifier = pipeline("sentiment-analysis", model="Menna-Khaled/SentimentAnalysis")
classifier(text)